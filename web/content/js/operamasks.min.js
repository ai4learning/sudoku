(function(a, g) {
    function b(c, d) {
        var f = c.nodeName.toLowerCase();
        if ("area" === f) {
            var f = c.parentNode
              , b = f.name;
            if (!c.href || !b || "map" !== f.nodeName.toLowerCase())
                return !1;
            f = a("img[usemap\x3d#" + b + "]")[0];
            return !!f && e(f)
        }
        return (/input|select|textarea|button|object/.test(f) ? !c.disabled : "a" == f ? c.href || d : d) && e(c)
    }
    function e(c) {
        return !a(c).parents().andSelf().filter(function() {
            return "hidden" === a.curCSS(this, "visibility") || a.expr.filters.hidden(this)
        }).length
    }
    a.om = a.om || {};
    a.om.version || (a.extend(a.om, {
        version: "2.0",
        keyCode: {
            TAB: 9,
            ENTER: 13,
            ESCAPE: 27,
            SPACE: 32,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40
        },
        lang: {
            _get: function(c, d, f) {
                return c[f] ? c[f] : a.om.lang[d][f]
            }
        }
    }),
    a.fn.extend({
        propAttr: a.fn.prop || a.fn.attr,
        _oldFocus: a.fn.focus,
        focus: function(c, d) {
            return "number" === typeof c ? this.each(function() {
                var f = this;
                setTimeout(function() {
                    a(f).focus();
                    d && d.call(f)
                }, c)
            }) : this._oldFocus.apply(this, arguments)
        },
        scrollParent: function() {
            var c;
            c = a.browser.msie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position")) ? this.parents().filter(function() {
                return /(relative|absolute|fixed)/.test(a.curCSS(this, "position", 1)) && /(auto|scroll)/.test(a.curCSS(this, "overflow", 1) + a.curCSS(this, "overflow-y", 1) + a.curCSS(this, "overflow-x", 1))
            }).eq(0) : this.parents().filter(function() {
                return /(auto|scroll)/.test(a.curCSS(this, "overflow", 1) + a.curCSS(this, "overflow-y", 1) + a.curCSS(this, "overflow-x", 1))
            }).eq(0);
            return /fixed/.test(this.css("position")) || !c.length ? a(document) : c
        },
        zIndex: function(c) {
            if (c !== g)
                return this.css("zIndex", c);
            if (this.length) {
                c = a(this[0]);
                for (var d; c.length && c[0] !== document; ) {
                    d = c.css("position");
                    if ("absolute" === d || "relative" === d || "fixed" === d)
                        if (d = parseInt(c.css("zIndex"), 10),
                        !isNaN(d) && 0 !== d)
                            return d;
                    c = c.parent()
                }
            }
            return 0
        },
        disableSelection: function() {
            return this.bind((a.support.selectstart ? "selectstart" : "mousedown") + ".om-disableSelection", function(a) {
                a.preventDefault()
            })
        },
        enableSelection: function() {
            return this.unbind(".om-disableSelection")
        }
    }),
    a.each(["Width", "Height"], function(c, d) {
        function f(f, d, c, e) {
            a.each(b, function() {
                d -= parseFloat(a.curCSS(f, "padding" + this, !0)) || 0;
                c && (d -= parseFloat(a.curCSS(f, "border" + this + "Width", !0)) || 0);
                e && (d -= parseFloat(a.curCSS(f, "margin" + this, !0)) || 0)
            });
            return d
        }
        var b = "Width" === d ? ["Left", "Right"] : ["Top", "Bottom"]
          , e = d.toLowerCase()
          , q = {
            innerWidth: a.fn.innerWidth,
            innerHeight: a.fn.innerHeight,
            outerWidth: a.fn.outerWidth,
            outerHeight: a.fn.outerHeight
        };
        a.fn["inner" + d] = function(c) {
            return c === g ? q["inner" + d].call(this) : this.each(function() {
                a(this).css(e, f(this, c) + "px")
            })
        }
        ;
        a.fn["outer" + d] = function(c, b) {
            return "number" !== typeof c ? q["outer" + d].call(this, c) : this.each(function() {
                a(this).css(e, f(this, c, !0, b) + "px")
            })
        }
    }),
    a.extend(a.expr[":"], {
        data: function(c, d, f) {
            return !!a.data(c, f[3])
        },
        focusable: function(c) {
            return b(c, !isNaN(a.attr(c, "tabindex")))
        },
        tabbable: function(c) {
            var d = a.attr(c, "tabindex")
              , f = isNaN(d);
            return (f || 0 <= d) && b(c, !f)
        }
    }),
    a(function() {
        var c = document.body
          , d = c.appendChild(d = document.createElement("div"));
        a.extend(d.style, {
            minHeight: "100px",
            height: "auto",
            padding: 0,
            borderWidth: 0
        });
        a.support.minHeight = 100 === d.offsetHeight;
        a.support.selectstart = "onselectstart"in d;
        c.removeChild(d).style.display = "none"
    }),
    a.extend(a.om, {
        plugin: {
            add: function(c, d, f) {
                c = a.om[c].prototype;
                for (var b in f)
                    c.plugins[b] = c.plugins[b] || [],
                    c.plugins[b].push([d, f[b]])
            },
            call: function(a, d, f) {
                if ((d = a.plugins[d]) && a.element[0].parentNode)
                    for (var b = 0; b < d.length; b++)
                        a.options[d[b][0]] && d[b][1].apply(a.element, f)
            }
        }
    }))
}
)(jQuery);
(function(a, g) {
    if (a.cleanData) {
        var b = a.cleanData;
        a.cleanData = function(e) {
            for (var c = 0, d; null != (d = e[c]); c++)
                a(d).triggerHandler("om-remove");
            b(e)
        }
    }
    a.omWidget = function(b, c, d) {
        var f = b.split(".")[0], h;
        b = b.split(".")[1];
        h = f + "-" + b;
        d || (d = c,
        c = a.OMWidget);
        a.expr[":"][h] = function(d) {
            return !!a.data(d, b)
        }
        ;
        a[f] = a[f] || {};
        a[f][b] = function(a, d) {
            arguments.length && this._createWidget(a, d)
        }
        ;
        c = new c;
        c.options = a.extend(!0, {}, c.options);
        a[f][b].prototype = a.extend(!0, c, {
            namespace: f,
            widgetName: b,
            widgetEventPrefix: a[f][b].prototype.widgetEventPrefix || b,
            widgetBaseClass: h
        }, d);
        a.omWidget.bridge(b, a[f][b])
    }
    ;
    a.omWidget.bridge = function(b, c) {
        a.fn[b] = function(d) {
            var f = "string" === typeof d
              , h = Array.prototype.slice.call(arguments, 1)
              , k = this;
            d = !f && h.length ? a.extend.apply(null, [!0, d].concat(h)) : d;
            if (f && "_" === d.charAt(0))
                return k;
            f ? this.each(function() {
                var f = a.data(this, b);
                if ("options" == d)
                    return k = f && f.options,
                    !1;
                var c = f && a.isFunction(f[d]) ? f[d].apply(f, h) : f;
                if (c !== f && c !== g)
                    return k = c,
                    !1
            }) : this.each(function() {
                var f = a.data(this, b);
                f ? (f._setOptions(d || {}),
                a.extend(f.options, d),
                a(f.beforeInitListeners).each(function() {
                    this.call(f)
                }),
                f._init(),
                a(f.initListeners).each(function() {
                    this.call(f)
                })) : a.data(this, b, new c(d,this))
            });
            return k
        }
    }
    ;
    a.omWidget.addCreateListener = function(b, c) {
        var d = b.split(".");
        a[d[0]][d[1]].prototype.createListeners.push(c)
    }
    ;
    a.omWidget.addInitListener = function(b, c) {
        var d = b.split(".");
        a[d[0]][d[1]].prototype.initListeners.push(c)
    }
    ;
    a.omWidget.addBeforeInitListener = function(b, c) {
        var d = b.split(".");
        a[d[0]][d[1]].prototype.beforeInitListeners.push(c)
    }
    ;
    a.OMWidget = function(a, b) {
        this.createListeners = [];
        this.initListeners = [];
        this.beforeInitListeners = [];
        arguments.length && this._createWidget(a, b)
    }
    ;
    a.OMWidget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        options: {
            disabled: !1
        },
        _createWidget: function(b, c) {
            a.data(c, this.widgetName, this);
            this.element = a(c);
            this.options = a.extend(!0, {}, this.options, this._getCreateOptions(), b);
            var d = this;
            this.element.bind("om-remove._" + this.widgetName, function() {
                d.destroy()
            });
            this._create();
            a(this.createListeners).each(function() {
                this.call(d)
            });
            this._trigger("create");
            a(this.beforeInitListeners).each(function() {
                this.call(d)
            });
            this._init();
            a(this.initListeners).each(function() {
                this.call(d)
            })
        },
        _getCreateOptions: function() {
            return a.metadata && a.metadata.get(this.element[0])[this.widgetName]
        },
        _create: function() {},
        _init: function() {},
        destroy: function() {
            this.element.unbind("." + this.widgetName).removeData(this.widgetName);
            this.widget().unbind("." + this.widgetName)
        },
        widget: function() {
            return this.element
        },
        option: function(b, c) {
            var d = b;
            if (0 === arguments.length)
                return a.extend({}, this.options);
            if ("string" === typeof b) {
                if (c === g)
                    return this.options[b];
                d = {};
                d[b] = c
            }
            this._setOptions(d);
            return this
        },
        _setOptions: function(b) {
            var c = this;
            a.each(b, function(a, f) {
                c._setOption(a, f)
            });
            return this
        },
        _setOption: function(a, b) {
            this.options[a] = b;
            return this
        },
        _trigger: function(b, c) {
            var d = this.options[b];
            c = a.Event(c);
            c.type = b;
            if (c.originalEvent)
                for (var f = a.event.props.length, h; f; )
                    h = a.event.props[--f],
                    c[h] = c.originalEvent[h];
            h = [];
            for (var k = arguments.length, f = 2; f < k; f++)
                h[f - 2] = arguments[f];
            1 < k && (h[k - 2] = arguments[1]);
            return !(a.isFunction(d) && !1 === d.apply(this.element, h) || c.isDefaultPrevented())
        }
    }
}
)(jQuery);
(function(a, g) {
    a.omWidget("om.omMouse", {
        options: {
            cancel: ":input,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var b = this;
            this.element.bind("mousedown." + this.widgetName, function(a) {
                return b._mouseDown(a)
            }).bind("click." + this.widgetName, function(e) {
                if (!0 === a.data(e.target, b.widgetName + ".preventClickEvent"))
                    return a.removeData(e.target, b.widgetName + ".preventClickEvent"),
                    e.stopImmediatePropagation(),
                    !1
            });
            this.started = !1
        },
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName)
        },
        _mouseDown: function(b) {
            b.originalEvent = b.originalEvent || {};
            if (!b.originalEvent.mouseHandled) {
                this._mouseStarted && this._mouseUp(b);
                this._mouseDownEvent = b;
                var e = this
                  , c = 1 == b.which
                  , d = "string" == typeof this.options.cancel ? a(b.target).closest(this.options.cancel).length : !1;
                if (!c || d || !this._mouseCapture(b))
                    return !0;
                this.mouseDelayMet = !this.options.delay;
                this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function() {
                    e.mouseDelayMet = !0
                }, this.options.delay));
                if (this._mouseDistanceMet(b) && this._mouseDelayMet(b) && (this._mouseStarted = !1 !== this._mouseStart(b),
                !this._mouseStarted))
                    return b.preventDefault(),
                    !0;
                !0 === a.data(b.target, this.widgetName + ".preventClickEvent") && a.removeData(b.target, this.widgetName + ".preventClickEvent");
                this._mouseMoveDelegate = function(a) {
                    return e._mouseMove(a)
                }
                ;
                this._mouseUpDelegate = function(a) {
                    return e._mouseUp(a)
                }
                ;
                a(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
                b.preventDefault();
                return b.originalEvent.mouseHandled = !0
            }
        },
        _mouseMove: function(b) {
            if (a.browser.msie && !(9 <= document.documentMode || b.button))
                return this._mouseUp(b);
            if (this._mouseStarted)
                return this._mouseDrag(b),
                b.preventDefault();
            this._mouseDistanceMet(b) && this._mouseDelayMet(b) && ((this._mouseStarted = !1 !== this._mouseStart(this._mouseDownEvent, b)) ? this._mouseDrag(b) : this._mouseUp(b));
            return !this._mouseStarted
        },
        _mouseUp: function(b) {
            a(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            this._mouseStarted && (this._mouseStarted = !1,
            b.target == this._mouseDownEvent.target && a.data(b.target, this.widgetName + ".preventClickEvent", !0),
            this._mouseStop(b));
            return !1
        },
        _mouseDistanceMet: function(a) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - a.pageX), Math.abs(this._mouseDownEvent.pageY - a.pageY)) >= this.options.distance
        },
        _mouseDelayMet: function(a) {
            return this.mouseDelayMet
        },
        _mouseStart: function(a) {},
        _mouseDrag: function(a) {},
        _mouseStop: function(a) {},
        _mouseCapture: function(a) {
            return !0
        }
    })
}
)(jQuery);
(function(a, g) {
    a.om = a.om || {};
    var b = /left|center|right/
      , e = /top|center|bottom/
      , c = a.fn.position
      , d = a.fn.offset;
    a.fn.position = function(f) {
        if (!f || !f.of)
            return c.apply(this, arguments);
        f = a.extend({}, f);
        var d = a(f.of), k = d[0], g = (f.collision || "flip").split(" "), m = f.offset ? f.offset.split(" ") : [0, 0], l, r, n;
        9 === k.nodeType ? (l = d.width(),
        r = d.height(),
        n = {
            top: 0,
            left: 0
        }) : k.setTimeout ? (l = d.width(),
        r = d.height(),
        n = {
            top: d.scrollTop(),
            left: d.scrollLeft()
        }) : k.preventDefault ? (f.at = "left top",
        l = r = 0,
        n = {
            top: f.of.pageY,
            left: f.of.pageX
        }) : (l = d.outerWidth(),
        r = d.outerHeight(),
        n = d.offset());
        a.each(["my", "at"], function() {
            var a = (f[this] || "").split(" ");
            1 === a.length && (a = b.test(a[0]) ? a.concat(["center"]) : e.test(a[0]) ? ["center"].concat(a) : ["center", "center"]);
            a[0] = b.test(a[0]) ? a[0] : "center";
            a[1] = e.test(a[1]) ? a[1] : "center";
            f[this] = a
        });
        1 === g.length && (g[1] = g[0]);
        m[0] = parseInt(m[0], 10) || 0;
        1 === m.length && (m[1] = m[0]);
        m[1] = parseInt(m[1], 10) || 0;
        "right" === f.at[0] ? n.left += l : "center" === f.at[0] && (n.left += l / 2);
        "bottom" === f.at[1] ? n.top += r : "center" === f.at[1] && (n.top += r / 2);
        n.left += m[0];
        n.top += m[1];
        return this.each(function() {
            var d = a(this), b = d.outerWidth(), c = d.outerHeight(), h = parseInt(a.curCSS(this, "marginLeft", !0)) || 0, e = parseInt(a.curCSS(this, "marginTop", !0)) || 0, k = b + h + (parseInt(a.curCSS(this, "marginRight", !0)) || 0), v = c + e + (parseInt(a.curCSS(this, "marginBottom", !0)) || 0), p = a.extend({}, n), t;
            "right" === f.my[0] ? p.left -= b : "center" === f.my[0] && (p.left -= b / 2);
            "bottom" === f.my[1] ? p.top -= c : "center" === f.my[1] && (p.top -= c / 2);
            p.left = Math.round(p.left);
            p.top = Math.round(p.top);
            t = {
                left: p.left - h,
                top: p.top - e
            };
            a.each(["left", "top"], function(d, h) {
                if (a.om.omPosition[g[d]])
                    a.om.omPosition[g[d]][h](p, {
                        targetWidth: l,
                        targetHeight: r,
                        elemWidth: b,
                        elemHeight: c,
                        collisionPosition: t,
                        collisionWidth: k,
                        collisionHeight: v,
                        offset: m,
                        my: f.my,
                        at: f.at
                    })
            });
            a.fn.bgiframe && d.bgiframe();
            d.offset(a.extend(p, {
                using: f.using
            }))
        })
    }
    ;
    a.om.omPosition = {
        fit: {
            left: function(d, b) {
                var c = a(window)
                  , c = b.collisionPosition.left + b.collisionWidth - c.width() - c.scrollLeft();
                d.left = 0 < c ? d.left - c : Math.max(d.left - b.collisionPosition.left, d.left)
            },
            top: function(d, b) {
                var c = a(window)
                  , c = b.collisionPosition.top + b.collisionHeight - c.height() - c.scrollTop();
                d.top = 0 < c ? d.top - c : Math.max(d.top - b.collisionPosition.top, d.top)
            }
        },
        flip: {
            left: function(d, b) {
                if ("center" !== b.at[0]) {
                    var c = a(window)
                      , c = b.collisionPosition.left + b.collisionWidth - c.width() - c.scrollLeft()
                      , e = "left" === b.my[0] ? -b.elemWidth : "right" === b.my[0] ? b.elemWidth : 0
                      , g = "left" === b.at[0] ? b.targetWidth : -b.targetWidth
                      , l = -2 * b.offset[0];
                    d.left += 0 > b.collisionPosition.left ? e + g + l : 0 < c ? e + g + l : 0
                }
            },
            top: function(d, b) {
                if ("center" !== b.at[1]) {
                    var c = a(window)
                      , c = b.collisionPosition.top + b.collisionHeight - c.height() - c.scrollTop()
                      , e = "top" === b.my[1] ? -b.elemHeight : "bottom" === b.my[1] ? b.elemHeight : 0
                      , g = "top" === b.at[1] ? b.targetHeight : -b.targetHeight
                      , l = -2 * b.offset[1];
                    d.top += 0 > b.collisionPosition.top ? e + g + l : 0 < c ? e + g + l : 0
                }
            }
        }
    };
    a.offset.setOffset || (a.offset.setOffset = function(d, b) {
        /static/.test(a.curCSS(d, "position")) && (d.style.position = "relative");
        var c = a(d)
          , e = c.offset()
          , g = parseInt(a.curCSS(d, "top", !0), 10) || 0
          , l = parseInt(a.curCSS(d, "left", !0), 10) || 0
          , e = {
            top: b.top - e.top + g,
            left: b.left - e.left + l
        };
        "using"in b ? b.using.call(d, e) : c.css(e)
    }
    ,
    a.fn.offset = function(b) {
        var c = this[0];
        return c && c.ownerDocument ? b ? this.each(function() {
            a.offset.setOffset(this, b)
        }) : d.call(this) : null
    }
    )
}
)(jQuery);
(function(a, g) {
    a.omWidget("om.omDraggable", a.om.omMouse, {
        widgetEventPrefix: "drag",
        options: {
            axis: !1,
            containment: !1,
            cursor: "auto",
            _scope: "default",
            handle: !1,
            helper: "original",
            revert: !1,
            scroll: !0
        },
        _create: function() {
            "original" != this.options.helper || /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative");
            this.element.addClass("om-draggable");
            this.options.disabled && this.element.addClass("om-draggable-disabled");
            this._mouseInit()
        },
        destroy: function() {
            if (this.element.data("omDraggable"))
                return this.element.removeData("omDraggable").unbind(".draggable").removeClass("om-draggable om-draggable-dragging om-draggable-disabled"),
                this._mouseDestroy(),
                this
        },
        _mouseCapture: function(b) {
            var e = this.options;
            return this.helper || e.disabled || a(b.target).is(".om-resizable-handle") ? !1 : (this.handle = this._getHandle(b)) ? !0 : !1
        },
        _mouseStart: function(b) {
            var e = this.options;
            this.helper = this._createHelper(b);
            this._cacheHelperProportions();
            a.om.ddmanager && (a.om.ddmanager.current = this);
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            a.extend(this.offset, {
                click: {
                    left: b.pageX - this.offset.left,
                    top: b.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this.position = this._generatePosition(b);
            this.originalPageX = b.pageX;
            this.originalPageY = b.pageY;
            e.containment && this._setContainment();
            if (!1 === this._trigger("onStart", b))
                return this._clear(),
                !1;
            this._cacheHelperProportions();
            a.om.ddmanager && !e.dropBehaviour && a.om.ddmanager.prepareOffsets(this, b);
            this.helper.addClass("om-draggable-dragging");
            this._mouseDrag(b, !0);
            a.om.ddmanager && a.om.ddmanager.dragStart(this, b);
            return !0
        },
        _mouseDrag: function(b, e) {
            this.position = this._generatePosition(b);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!e) {
                var c = this._uiHash();
                if (!1 === this._trigger("onDrag", b, c))
                    return this._mouseUp({}),
                    !1;
                this.position = c.position
            }
            this.options.axis && "y" == this.options.axis || (this.helper[0].style.left = this.position.left + "px");
            this.options.axis && "x" == this.options.axis || (this.helper[0].style.top = this.position.top + "px");
            a.om.ddmanager && a.om.ddmanager.drag(this, b);
            return !1
        },
        _mouseStop: function(b) {
            var e = !1;
            a.om.ddmanager && !this.options.dropBehaviour && (e = a.om.ddmanager.drop(this, b));
            this.dropped && (e = this.dropped,
            this.dropped = !1);
            if (!(this.element[0] && this.element[0].parentNode || "original" != this.options.helper))
                return !1;
            if ("invalid" == this.options.revert && !e || "valid" == this.options.revert && e || !0 === this.options.revert || a.isFunction(this.options.revert) && this.options.revert.call(this.element, e)) {
                var c = this;
                a(this.helper).animate(this.originalPosition, 500, function() {
                    !1 !== c._trigger("onStop", b) && c._clear()
                })
            } else
                !1 !== this._trigger("onStop", b) && this._clear();
            return !1
        },
        _mouseUp: function(b) {
            a.om.ddmanager && a.om.ddmanager.dragStop(this, b);
            return a.om.omMouse.prototype._mouseUp.call(this, b)
        },
        cancel: function() {
            this.helper.is(".om-draggable-dragging") ? this._mouseUp({}) : this._clear();
            return this
        },
        _getHandle: function(b) {
            var e = this.options.handle && a(this.options.handle, this.element).length ? !1 : !0;
            a(this.options.handle, this.element).find("*").andSelf().each(function() {
                this == b.target && (e = !0)
            });
            return e
        },
        _createHelper: function(b) {
            var e = this.options;
            b = a.isFunction(e.helper) ? a(e.helper.apply(this.element[0], [b])) : "clone" == e.helper ? this.element.clone().removeAttr("id") : this.element;
            b.parents("body").length || b.appendTo(this.element[0].parentNode);
            b[0] == this.element[0] || /(fixed|absolute)/.test(b.css("position")) || b.css("position", "absolute");
            return b
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var b = this.offsetParent.offset();
            "absolute" == this.cssPosition && this.scrollParent[0] != document && a.contains(this.scrollParent[0], this.offsetParent[0]) && (b.left += this.scrollParent.scrollLeft(),
            b.top += this.scrollParent.scrollTop());
            if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && "html" == this.offsetParent[0].tagName.toLowerCase() && a.browser.msie)
                b = {
                    top: 0,
                    left: 0
                };
            return {
                top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function() {
            if ("relative" == this.cssPosition) {
                var a = this.element.position();
                return {
                    top: a.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: a.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            }
            return {
                top: 0,
                left: 0
            }
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.element.css("marginLeft"), 10) || 0,
                top: parseInt(this.element.css("marginTop"), 10) || 0,
                right: parseInt(this.element.css("marginRight"), 10) || 0,
                bottom: parseInt(this.element.css("marginBottom"), 10) || 0
            }
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function() {
            var b = this.options;
            "parent" == b.containment && (b.containment = this.helper[0].parentNode);
            if ("document" == b.containment || "window" == b.containment)
                this.containment = ["document" == b.containment ? 0 : a(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, "document" == b.containment ? 0 : a(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, ("document" == b.containment ? 0 : a(window).scrollLeft()) + a("document" == b.containment ? document : window).width() - this.helperProportions.width - this.margins.left, ("document" == b.containment ? 0 : a(window).scrollTop()) + (a("document" == b.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
            if (/^(document|window|parent)$/.test(b.containment) || b.containment.constructor == Array)
                b.containment.constructor == Array && (this.containment = b.containment);
            else {
                var b = a(b.containment)
                  , e = b[0];
                if (e) {
                    b.offset();
                    var c = "hidden" != a(e).css("overflow");
                    this.containment = [(parseInt(a(e).css("borderLeftWidth"), 10) || 0) + (parseInt(a(e).css("paddingLeft"), 10) || 0), (parseInt(a(e).css("borderTopWidth"), 10) || 0) + (parseInt(a(e).css("paddingTop"), 10) || 0), (c ? Math.max(e.scrollWidth, e.offsetWidth) : e.offsetWidth) - (parseInt(a(e).css("borderLeftWidth"), 10) || 0) - (parseInt(a(e).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (c ? Math.max(e.scrollHeight, e.offsetHeight) : e.offsetHeight) - (parseInt(a(e).css("borderTopWidth"), 10) || 0) - (parseInt(a(e).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
                    this.relative_container = b
                }
            }
        },
        _convertPositionTo: function(b, e) {
            e || (e = this.position);
            var c = "absolute" == b ? 1 : -1
              , d = "absolute" != this.cssPosition || this.scrollParent[0] != document && a.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent
              , f = /(html|body)/i.test(d[0].tagName);
            return {
                top: e.top + this.offset.relative.top * c + this.offset.parent.top * c - (a.browser.safari && 526 > a.browser.version && "fixed" == this.cssPosition ? 0 : ("fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : f ? 0 : d.scrollTop()) * c),
                left: e.left + this.offset.relative.left * c + this.offset.parent.left * c - (a.browser.safari && 526 > a.browser.version && "fixed" == this.cssPosition ? 0 : ("fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : f ? 0 : d.scrollLeft()) * c)
            }
        },
        _generatePosition: function(b) {
            var e = "absolute" != this.cssPosition || this.scrollParent[0] != document && a.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent
              , c = /(html|body)/i.test(e[0].tagName)
              , d = b.pageX
              , f = b.pageY;
            if (this.originalPosition) {
                var h;
                this.containment && (this.relative_container ? (h = this.relative_container.offset(),
                h = [this.containment[0] + h.left, this.containment[1] + h.top, this.containment[2] + h.left, this.containment[3] + h.top]) : h = this.containment,
                b.pageX - this.offset.click.left < h[0] && (d = h[0] + this.offset.click.left),
                b.pageY - this.offset.click.top < h[1] && (f = h[1] + this.offset.click.top),
                b.pageX - this.offset.click.left > h[2] && (d = h[2] + this.offset.click.left),
                b.pageY - this.offset.click.top > h[3] && (f = h[3] + this.offset.click.top))
            }
            return {
                top: f - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (a.browser.safari && 526 > a.browser.version && "fixed" == this.cssPosition ? 0 : "fixed" == this.cssPosition ? -this.scrollParent.scrollTop() : c ? 0 : e.scrollTop()),
                left: d - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (a.browser.safari && 526 > a.browser.version && "fixed" == this.cssPosition ? 0 : "fixed" == this.cssPosition ? -this.scrollParent.scrollLeft() : c ? 0 : e.scrollLeft())
            }
        },
        _clear: function() {
            this.helper.removeClass("om-draggable-dragging");
            this.helper[0] == this.element[0] || this.cancelHelperRemoval || this.helper.remove();
            this.helper = null;
            this.cancelHelperRemoval = !1
        },
        _trigger: function(b, e, c) {
            c = c || this._uiHash();
            a.om.plugin.call(this, b, [e, c]);
            "onDrag" == b && (this.positionAbs = this._convertPositionTo("absolute"));
            return a.OMWidget.prototype._trigger.call(this, b, e, c)
        },
        plugins: {},
        _uiHash: function(a) {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            }
        }
    });
    a.om.plugin.add("omDraggable", "cursor", {
        onStart: function(b, e) {
            var c = a("body")
              , d = a(this).data("omDraggable").options;
            c.css("cursor") && (d._cursor = c.css("cursor"));
            c.css("cursor", d.cursor)
        },
        onStop: function(b, e) {
            var c = a(this).data("omDraggable");
            c && (c = c.options,
            c._cursor && a("body").css("cursor", c._cursor))
        }
    });
    a.om.plugin.add("omDraggable", "scroll", {
        onStart: function(b, e) {
            var c = a(this).data("omDraggable");
            c.scrollParent[0] != document && "HTML" != c.scrollParent[0].tagName && (c.overflowOffset = c.scrollParent.offset())
        },
        onDrag: function(b, e) {
            var c = a(this).data("omDraggable")
              , d = c.options
              , f = !1;
            c.scrollParent[0] != document && "HTML" != c.scrollParent[0].tagName ? (d.axis && "x" == d.axis || (20 > c.overflowOffset.top + c.scrollParent[0].offsetHeight - e.pageY ? c.scrollParent[0].scrollTop = f = c.scrollParent[0].scrollTop + 20 : 20 > e.pageY - c.overflowOffset.top && (c.scrollParent[0].scrollTop = f = c.scrollParent[0].scrollTop - 20)),
            d.axis && "y" == d.axis || (20 > c.overflowOffset.left + c.scrollParent[0].offsetWidth - e.pageX ? c.scrollParent[0].scrollLeft = f = c.scrollParent[0].scrollLeft + 20 : 20 > e.pageX - c.overflowOffset.left && (c.scrollParent[0].scrollLeft = f = c.scrollParent[0].scrollLeft - 20))) : (d.axis && "x" == d.axis || (20 > e.pageY - a(document).scrollTop() ? f = a(document).scrollTop(a(document).scrollTop() - 20) : 20 > a(window).height() - (e.pageY - a(document).scrollTop()) && (f = a(document).scrollTop(a(document).scrollTop() + 20))),
            d.axis && "y" == d.axis || (20 > e.pageX - a(document).scrollLeft() ? f = a(document).scrollLeft(a(document).scrollLeft() - 20) : 20 > a(window).width() - (e.pageX - a(document).scrollLeft()) && (f = a(document).scrollLeft(a(document).scrollLeft() + 20))));
            !1 !== f && a.om.ddmanager && !d.dropBehaviour && a.om.ddmanager.prepareOffsets(c, e)
        }
    })
}
)(jQuery);
(function(a, g) {
    var b = {
        buttons: !0,
        height: !0,
        maxHeight: !0,
        maxWidth: !0,
        minHeight: !0,
        minWidth: !0,
        width: !0
    }
      , e = {
        maxHeight: !0,
        maxWidth: !0,
        minHeight: !0,
        minWidth: !0
    }
      , c = a.attrFn || {
        val: !0,
        css: !0,
        html: !0,
        text: !0,
        data: !0,
        width: !0,
        height: !0,
        offset: !0,
        click: !0
    };
    a.omWidget("om.omDialog", {
        options: {
            autoOpen: !0,
            buttons: {},
            closeOnEscape: !0,
            closeText: "close",
            dialogClass: "",
            draggable: !0,
            hide: null,
            height: "auto",
            maxHeight: !1,
            maxWidth: !1,
            minHeight: 150,
            minWidth: 150,
            modal: !1,
            position: {
                my: "center",
                at: "center",
                collision: "fit",
                using: function(d) {
                    var b = a(this).css(d).offset().top;
                    0 > b && a(this).css("top", d.top - b)
                }
            },
            resizable: !0,
            show: null,
            stack: !0,
            title: "",
            width: 300,
            zIndex: 1E3,
            id: ""
        },
        _create: function() {
            this.originalTitle = this.element.attr("title");
            "string" !== typeof this.originalTitle && (this.originalTitle = "");
            this.options.title = this.options.title || this.originalTitle;
            var d = this;
            d.element.parent().bind("om-remove.omDialog", d.__removeBind = function() {
                d.element.remove()
            }
            );
            var b = d.options
              , c = b.title || "\x26#160;"
              , e = a.om.omDialog.getTitleId(d.element)
              , g = (d.uiDialog = a("\x3cdiv\x3e\x3c/div\x3e")).appendTo(document.body).hide().addClass("om-dialog om-widget om-widget-content om-corner-all " + b.dialogClass).css({
                zIndex: b.zIndex
            }).attr("tabIndex", -1).css("outline", 0).keydown(function(c) {
                b.closeOnEscape && c.keyCode && c.keyCode === a.om.keyCode.ESCAPE && (d.close(c),
                c.preventDefault())
            }).attr({
                role: "dialog",
                "aria-labelledby": e
            }).mousedown(function(a) {
                d.moveToTop(!1, a)
            }).attr("id", b.id);
            d.element.show().removeAttr("title").addClass("om-dialog-content om-widget-content").appendTo(g);
            var m = (d.uiDialogTitlebar = a("\x3cdiv\x3e\x3c/div\x3e")).addClass("om-dialog-titlebar om-widget-header om-corner-all om-helper-clearfix").prependTo(g)
              , l = a('\x3ca href\x3d"#"\x3e\x3c/a\x3e').addClass("om-dialog-titlebar-close om-corner-tr").attr("role", "button").hover(function() {
                l.addClass("om-state-hover")
            }, function() {
                l.removeClass("om-state-hover")
            }).focus(function() {
                l.addClass("om-state-focus")
            }).blur(function() {
                l.removeClass("om-state-focus")
            }).click(function(a) {
                d.close(a);
                return !1
            }).appendTo(m);
            (d.uiDialogTitlebarCloseText = a("\x3cspan\x3e\x3c/span\x3e")).addClass("om-icon-closethick").text(b.closeText).appendTo(l);
            a("\x3cspan\x3e\x3c/span\x3e").addClass("om-dialog-title").attr("id", e).html(c).prependTo(m);
            m.find("*").add(m).disableSelection();
            b.draggable && a.om.omDraggable && d._makeDraggable();
            b.resizable && a.fn.omResizable && d._makeResizable();
            d._createButtons(b.buttons);
            d._isOpen = !1;
            a.fn.bgiframe && g.bgiframe()
        },
        _init: function() {
            this.options.autoOpen && this.open()
        },
        destroy: function() {
            this.overlay && this.overlay.destroy();
            this.uiDialog.hide();
            this.element.unbind(".dialog").removeData("dialog").removeClass("om-dialog-content om-widget-content").hide().appendTo("body");
            this.uiDialog.remove();
            this.originalTitle && this.element.attr("title", this.originalTitle);
            return this
        },
        widget: function() {
            return this.uiDialog
        },
        close: function(d) {
            var b = this, c, e, g = this.options, m = g.onClose;
            if (!g.onBeforeClose || !1 !== b._trigger("onBeforeClose", d))
                return b.overlay && b.overlay.destroy(),
                b.uiDialog.unbind("keypress.om-dialog"),
                b._isOpen = !1,
                b.options.hide ? b.uiDialog.hide(b.options.hide, function() {
                    m && b._trigger("onClose", d)
                }) : (b.uiDialog.hide(),
                m && b._trigger("onClose", d)),
                a.om.omDialog.overlay.resize(),
                b.options.modal && (c = 0,
                a(".om-dialog").each(function() {
                    this !== b.uiDialog[0] && (e = a(this).css("z-index"),
                    isNaN(e) || (c = Math.max(c, e)))
                }),
                a.om.omDialog.maxZ = c),
                b
        },
        isOpen: function() {
            return this._isOpen
        },
        moveToTop: function(b, c) {
            var e = this.options;
            if (e.modal && !b || !e.stack && !e.modal)
                return this._trigger("onFocus", c);
            e.zIndex > a.om.omDialog.maxZ && (a.om.omDialog.maxZ = e.zIndex);
            this.overlay && (a.om.omDialog.maxZ += 1,
            this.overlay.$el.css("z-index", a.om.omDialog.overlay.maxZ = a.om.omDialog.maxZ));
            e = {
                scrollTop: this.element.scrollTop(),
                scrollLeft: this.element.scrollLeft()
            };
            a.om.omDialog.maxZ += 1;
            this.uiDialog.css("z-index", a.om.omDialog.maxZ);
            this.element.attr(e);
            this._trigger("onFocus", c);
            return this
        },
        open: function() {
            if (!this._isOpen) {
                var b = this.options
                  , c = this.uiDialog;
                this.overlay = b.modal ? new a.om.omDialog.overlay(this) : null;
                this._size();
                this._position(b.position);
                c.fadeIn();
                this.moveToTop(!0);
                b.modal && c.bind("keypress.om-dialog", function(b) {
                    if (b.keyCode === a.om.keyCode.TAB) {
                        var d = a(":tabbable", this)
                          , c = d.filter(":first")
                          , d = d.filter(":last");
                        if (b.target === d[0] && !b.shiftKey)
                            return c.focus(1),
                            !1;
                        if (b.target === c[0] && b.shiftKey)
                            return d.focus(1),
                            !1
                    }
                });
                a(this.element.find(":tabbable").get().concat(c.find(".om-dialog-buttonpane :tabbable").get().concat(c.get()))).eq(0).focus();
                this._isOpen = !0;
                b.onOpen && this._trigger("onOpen");
                return this
            }
        },
        _createButtons: function(b) {
            var f = this
              , e = !1
              , g = a("\x3cdiv\x3e\x3c/div\x3e").addClass("om-dialog-buttonpane om-helper-clearfix")
              , q = a("\x3cdiv\x3e\x3c/div\x3e").addClass("om-dialog-buttonset").appendTo(g);
            f.uiDialog.find(".om-dialog-buttonpane").remove();
            "object" === typeof b && null !== b && a.each(b, function() {
                return !(e = !0)
            });
            e && (a.each(b, function(b, d) {
                d = a.isFunction(d) ? {
                    click: d,
                    text: b
                } : d;
                var e = a('\x3cbutton type\x3d"button"\x3e\x3c/button\x3e').click(function() {
                    d.click.apply(f.element[0], arguments)
                }).appendTo(q);
                a.each(d, function(a, b) {
                    if ("click" !== a)
                        if (a in c)
                            e[a](b);
                        else
                            e.attr(a, b)
                });
                a.fn.omButton && e.omButton()
            }),
            g.appendTo(f.uiDialog))
        },
        _makeDraggable: function() {
            function b(a) {
                return {
                    position: a.position,
                    offset: a.offset
                }
            }
            var c = this, e = c.options, g = a(document), q;
            c.uiDialog.omDraggable({
                cancel: ".om-dialog-content, .om-dialog-titlebar-close",
                handle: ".om-dialog-titlebar",
                containment: "document",
                cursor: "move",
                onStart: function(g, k) {
                    q = "auto" === e.height ? "auto" : a(this).height();
                    a(this).height(a(this).height()).addClass("om-dialog-dragging");
                    c._trigger("onDragStart", b(g), k)
                },
                onDrag: function(a, e) {
                    c._trigger("onDrag", b(a), e)
                },
                onStop: function(m, l) {
                    e.position = [m.position.left - g.scrollLeft(), m.position.top - g.scrollTop()];
                    a(this).removeClass("om-dialog-dragging").height(q);
                    c._trigger("onDragStop", b(m), l);
                    a.om.omDialog.overlay.resize()
                }
            })
        },
        _makeResizable: function(b) {
            function c(a) {
                return {
                    originalPosition: a.originalPosition,
                    originalSize: a.originalSize,
                    position: a.position,
                    size: a.size
                }
            }
            b = b === g ? this.options.resizable : b;
            var e = this
              , k = e.options
              , q = e.uiDialog.css("position");
            b = "string" === typeof b ? b : "n,e,s,w,se,sw,ne,nw";
            e.uiDialog.omResizable({
                cancel: ".om-dialog-content",
                containment: "document",
                alsoResize: e.element,
                maxWidth: k.maxWidth,
                maxHeight: k.maxHeight,
                minWidth: k.minWidth,
                minHeight: e._minHeight(),
                handles: b,
                start: function(b, d) {
                    a(this).addClass("om-dialog-resizing");
                    e._trigger("onResizeStart", b, c(d))
                },
                resize: function(a, b) {
                    e._trigger("onResize", a, c(b))
                },
                stop: function(b, d) {
                    a(this).removeClass("om-dialog-resizing");
                    k.height = a(this).height();
                    k.width = a(this).width();
                    e._trigger("onResizeStop", b, c(d));
                    a.om.omDialog.overlay.resize()
                }
            }).css("position", q).find(".om-resizable-se").addClass("om-icon om-icon-grip-diagonal-se")
        },
        _minHeight: function() {
            var a = this.options;
            return "auto" === a.height ? a.minHeight : Math.min(a.minHeight, a.height)
        },
        _position: function(b) {
            var c = [], e = [0, 0], g;
            if (b) {
                if ("string" === typeof b || "object" === typeof b && "0"in b)
                    c = b.split ? b.split(" ") : [b[0], b[1]],
                    1 === c.length && (c[1] = c[0]),
                    a.each(["left", "top"], function(a, b) {
                        +c[a] === c[a] && (e[a] = c[a],
                        c[a] = b)
                    }),
                    b = {
                        my: c.join(" "),
                        at: c.join(" "),
                        offset: e.join(" ")
                    };
                b = a.extend({}, a.om.omDialog.prototype.options.position, b)
            } else
                b = a.om.omDialog.prototype.options.position;
            (g = this.uiDialog.is(":visible")) || this.uiDialog.show();
            this.uiDialog.css({
                top: 0,
                left: 0
            }).position(a.extend({
                of: window
            }, b));
            g || this.uiDialog.hide()
        },
        _setOptions: function(c) {
            var f = this
              , g = {}
              , k = !1;
            a.each(c, function(a, c) {
                f._setOption(a, c);
                a in b && (k = !0);
                a in e && (g[a] = c)
            });
            k && this._size();
            this.uiDialog.is(":data(resizable)") && this.uiDialog.omResizable("option", g)
        },
        _setOption: function(b, c) {
            var e = this.uiDialog;
            switch (b) {
            case "buttons":
                this._createButtons(c);
                break;
            case "closeText":
                this.uiDialogTitlebarCloseText.text("" + c);
                break;
            case "dialogClass":
                e.removeClass(this.options.dialogClass).addClass("om-dialog om-widget om-widget-content om-corner-all " + c);
                break;
            case "disabled":
                c ? e.addClass("om-dialog-disabled") : e.removeClass("om-dialog-disabled");
                break;
            case "draggable":
                var g = e.is(":data(draggable)");
                g && !c && e.omDraggable("destroy");
                !g && c && this._makeDraggable();
                break;
            case "position":
                this._position(c);
                break;
            case "resizable":
                (g = e.is(":data(resizable)")) && !c && e.omResizable("destroy");
                g && "string" === typeof c && e.omResizable("option", "handles", c);
                g || !1 === c || this._makeResizable(c);
                break;
            case "title":
                a(".om-dialog-title", this.uiDialogTitlebar).html("" + (c || "\x26#160;"))
            }
            a.OMWidget.prototype._setOption.apply(this, arguments)
        },
        _size: function() {
            var b = this.options, c, e, g = this.uiDialog.is(":visible");
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                height: 0
            });
            b.minWidth > b.width && (b.width = b.minWidth);
            c = this.uiDialog.css({
                height: "auto",
                width: b.width
            }).height();
            e = Math.max(0, b.minHeight - c);
            "auto" === b.height ? a.support.minHeight ? this.element.css({
                minHeight: e,
                height: "auto"
            }) : (this.uiDialog.show(),
            b = this.element.css("height", "auto").height(),
            g || this.uiDialog.hide(),
            this.element.height(Math.max(b, e))) : this.element.height(Math.max(b.height - c, 0));
            this.uiDialog.is(":data(resizable)") && this.uiDialog.omResizable("option", "minHeight", this._minHeight())
        }
    });
    a.extend(a.om.omDialog, {
        version: "2.0",
        uuid: 0,
        maxZ: 0,
        getTitleId: function(a) {
            a = a.attr("id");
            a || (a = this.uuid += 1);
            return "ui-dialog-title-" + a
        },
        overlay: function(b) {
            this.$el = a.om.omDialog.overlay.create(b)
        }
    });
    a.extend(a.om.omDialog.overlay, {
        instances: [],
        oldInstances: [],
        maxZ: 0,
        events: a.map("focus mousedown mouseup keydown keypress click".split(" "), function(a) {
            return a + ".dialog-overlay"
        }).join(" "),
        create: function(b) {
            0 === this.instances.length && (setTimeout(function() {
                a.om.omDialog.overlay.instances.length && a(document).bind(a.om.omDialog.overlay.events, function(b) {
                    if (a(b.target).zIndex() < a.om.omDialog.overlay.maxZ)
                        return !1
                })
            }, 1),
            a(document).bind("keydown.dialog-overlay", function(c) {
                b.options.closeOnEscape && c.keyCode && c.keyCode === a.om.keyCode.ESCAPE && (b.close(c),
                c.preventDefault())
            }),
            a(window).bind("resize.dialog-overlay", a.om.omDialog.overlay.resize));
            var c = (this.oldInstances.pop() || a("\x3cdiv\x3e\x3c/div\x3e").addClass("om-widget-overlay")).appendTo(document.body).css({
                width: this.width(),
                height: this.height()
            });
            a.fn.bgiframe && c.bgiframe();
            this.instances.push(c);
            return c
        },
        destroy: function(b) {
            b.parent().unbind(this.__removeBind);
            var c = a.inArray(b, this.instances);
            -1 != c && this.oldInstances.push(this.instances.splice(c, 1)[0]);
            0 === this.instances.length && a([document, window]).unbind(".dialog-overlay");
            b.animate({
                opacity: 0
            }, function() {
                b.remove();
                b.css("opacity", 0.4)
            });
            var e = 0;
            a.each(this.instances, function() {
                e = Math.max(e, this.css("z-index"))
            });
            this.maxZ = e
        },
        height: function() {
            var b, c;
            return a.browser.msie && 7 > a.browser.version ? (b = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight),
            c = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight),
            b < c ? a(window).height() + "px" : b + "px") : a(document).height() + "px"
        },
        width: function() {
            var b, c;
            return a.browser.msie ? (b = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth),
            c = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth),
            b < c ? a(window).width() + "px" : b + "px") : a(document).width() + "px"
        },
        resize: function() {
            var b = a([]);
            a.each(a.om.omDialog.overlay.instances, function() {
                b = b.add(this)
            });
            b.css({
                width: 0,
                height: 0
            }).css({
                width: a.om.omDialog.overlay.width(),
                height: a.om.omDialog.overlay.height()
            })
        }
    });
    a.extend(a.om.omDialog.overlay.prototype, {
        destroy: function() {
            a.om.omDialog.overlay.destroy(this.$el)
        }
    })
}
)(jQuery);
(function(a) {
    a.omWidget("om.omScrollbar", {
        options: {
            thick: 8,
            zIndex: "auto"
        },
        _create: function() {
            var g = this.options;
            this._vScrollbar = a("\x3cdiv class\x3d'om-widget om-scrollbar om-corner-all'\x3e\x3c/div\x3e").width(g.thick).css("z-index", g.zIndex).appendTo("body").hide();
            this._vScrollbar.type = "v";
            this._hScrollbar = a("\x3cdiv class\x3d'om-widget om-scrollbar om-corner-all'\x3e\x3c/div\x3e").height(g.thick).appendTo("body").css("z-index", g.zIndex).hide();
            this._hScrollbar.type = "h"
        },
        _init: function() {
            this.element.css("overflow", "hidden");
            this._buildEvent()
        },
        destroy: function() {
            this._vScrollbar.remove();
            this._hScrollbar.remove()
        },
        _buildEvent: function() {
            var g = this
              , b = this.element
              , e = [this._vScrollbar, this._hScrollbar];
            a(e).each(function(c, f) {
                f._hover = !1;
                f._enable = !0;
                var h = f.type
                  , k = 0;
                f.omDraggable({
                    axis: "v" === h ? "y" : "x",
                    containment: b,
                    onStart: function(a, c) {
                        k = "v" === h ? b.scrollTop() : b.scrollLeft()
                    },
                    onDrag: function(a, c) {
                        var d = a.position
                          , e = a.originalPosition;
                        "v" == h ? b.scrollTop(k + g._getInt((d.top - e.top) * b.innerHeight() / f.outerHeight())) : b.scrollLeft(k + g._getInt((d.left - e.left) * b.innerWidth() / f.outerWidth()))
                    }
                }).hover(function() {
                    a(e).each(function(a, b) {
                        b._hover = !0;
                        clearTimeout(b._timer)
                    });
                    a(this).addClass("scrollbar-state-hover")
                }, function() {
                    a(e).each(function(a, b) {
                        b._hover = !1;
                        g._setTimer(b.type)
                    });
                    a(this).removeClass("scrollbar-state-hover")
                })
            });
            var c = a.browser.mozilla ? "DOMMouseScroll" : "mousewheel";
            b.bind(c, function(a) {
                g._mousewheelListener.call(g, a)
            });
            a(e).each(function(a, b) {
                b.bind(c, function(a) {
                    g._mousewheelListener.call(g, a)
                })
            });
            b.hover(function() {
                a(e).each(function(a, b) {
                    b._hover = !0;
                    clearTimeout(b._timer);
                    g._resize(b);
                    b._enable && b.fadeIn("fast")
                })
            }, function() {
                a(e).each(function(a, b) {
                    b._hover = !1;
                    g._setTimer(b.type)
                })
            })
        },
        _mousewheelListener: function(a) {
            if (this._vScrollbar._enable) {
                var b = 0
                  , b = a.wheelDelta ? -a.wheelDelta : 40 * a.detail
                  , b = 10 * (b / 120)
                  , e = this._vScrollbar
                  , c = this.element
                  , d = c.offset().top + this._getInt(c.css("border-top-width")) + this._getInt(c.css("padding-top")) + this._getInt(c.css("padding-top-width"))
                  , f = e.position().top - d
                  , h = c.height() - e.outerHeight();
                0 > b + f ? (e.css("top", d),
                c.scrollTop(0)) : b + f > h ? (e.css("top", d + h),
                c.scrollTop(c[0].scrollHeight - c.height())) : (e.css("top", "+\x3d" + b),
                c.scrollTop(c.scrollTop() + parseInt(b * c.innerHeight() / e.outerHeight())));
                a.preventDefault()
            }
        },
        _getScrollbar: function(a) {
            return "h" === a ? this._hScrollbar : this._vScrollbar
        },
        _setTimer: function(a) {
            var b = this;
            clearTimeout(this._getScrollbar(a)._timer);
            (function(a) {
                setTimeout(function() {
                    var c = b._getScrollbar(a);
                    c._hover || c.fadeOut("fast")
                }, 200)
            }
            )(a)
        },
        refresh: function() {
            var g = this;
            a([this._vScrollbar, this._hScrollbar]).each(function(a, e) {
                g._resize(e)
            })
        },
        _resize: function(a) {
            var b = this.element
              , e = a.type
              , c = 0
              , d = b.offset()
              , f = b.width()
              , h = b.height()
              , k = b.outerWidth()
              , q = b.outerHeight()
              , m = this._getInt(b.css("border-left-width"))
              , l = this._getInt(b.css("border-right-width"))
              , r = this._getInt(b.css("border-top-width"))
              , n = this._getInt(b.css("border-bottom-width"))
              , s = this._getInt(b.css("padding-left"))
              , u = this._getInt(b.css("padding-top"));
            "v" === e ? (c = b[0].scrollHeight,
            c > h ? (a._enable = !0,
            a.outerHeight(this._getInt(h * b.innerHeight() / c)),
            a.css({
                left: d.left + k - a.outerWidth() - l,
                top: d.top + r + u + this._getInt(b.scrollTop() * h / c)
            })) : a._enable = !1) : "h" === e && (c = b[0].scrollWidth,
            c > b.innerWidth() ? (a._enable = !0,
            a.outerWidth(this._getInt((s + f) * f / c)),
            a.css({
                left: d.left + m + s + this._getInt(b.scrollLeft() * f / c),
                top: d.top + q - a.outerHeight() - n
            })) : a._enable = !1);
            a._enable ? a.fadeIn("fast") : a.fadeOut("fast")
        },
        _getInt: function(a) {
            return parseInt(a) || 0
        }
    })
}
)(jQuery);
(function(a) {
    a.omWidget("om.omProgressbar", {
        options: {
            value: 0,
            text: "{value}%",
            width: "auto",
            max: 100
        },
        min: 0,
        _create: function() {
            var g = this.element;
            g.addClass("om-progressbar om-widget om-widget-content om-corner-all");
            this.textDiv = a("\x3cdiv class\x3d'om-progressbar-text'\x3e\x3c/div\x3e").appendTo(g);
            this.valueDiv = a("\x3cdiv class\x3d'om-progressbar-value om-widget-header om-corner-left'\x3e\x3c/div\x3e").appendTo(g)
        },
        _init: function() {
            var a = this.element.width();
            "number" == typeof this.options.width && (a = this.options.width,
            this.element.width(a));
            this.textDiv.width(Math.floor(a));
            this.oldValue = this._value();
            this._refreshValue()
        },
        value: function(a) {
            if (void 0 === a)
                return this._value();
            this.options.value = a;
            this._refreshValue()
        },
        _value: function() {
            var a = this.options.value;
            "number" !== typeof a && (a = 0);
            return Math.min(this.options.max, Math.max(this.min, a))
        },
        _percentage: function() {
            return 100 * this._value() / this.options.max
        },
        _refreshValue: function() {
            var a = this.value()
              , b = this.options.onChange
              , e = this._percentage()
              , c = this.options.text
              , d = "";
            this.valueDiv.toggle(a > this.min).toggleClass("om-corner-right", a === this.options.max).width(e.toFixed(0) + "%");
            "function" == typeof c ? d = c.call(a, a) : "string" == typeof c && (d = c.replace("{value}", a));
            this.textDiv.html(d);
            this.oldValue !== a && (b && this._trigger("onChange", null, a, this.oldValue),
            this.oldValue = a)
        }
    })
}
)(jQuery);
